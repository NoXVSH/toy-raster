{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./js/blitter/webgl-blitter.js","webpack:///./js/core/buffer.js","webpack:///./js/core/math/matrix.js","webpack:///./js/core/math/vector.js","webpack:///./js/core/mesh/color.js","webpack:///./js/core/mesh/texture.js","webpack:///./js/core/raster.js","webpack:///./js/core/utils.js","webpack:///./js/main.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D,uCAAuC;AACvC,qCAAqC;AACrC,yBAAyB;AACzB,sCAAsC;AACtC,qCAAqC;AACrC,cAAc;AACd,4DAA4D;AAC5D,6CAA6C;AAC7C,yCAAyC;AACzC,6BAA6B;AAC7B,qEAAqE;AACrE,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,yC;;;;;;;;;;;AC3FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,WAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,WAAW;AAC1C;AACA;AACA;AACA;AACA,+BAA+B,WAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6BAA6B;AACpD;AACA;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA,2BAA2B,iCAAiC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,kC;;;;;;;;;;;ACpGA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,YAAY;AACzC;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,kC;;;;;;;;;;;ACxEA;AACA;AACA,2BAA2B,OAAO;AAClC,2BAA2B,OAAO;AAClC,2BAA2B,OAAO;AAClC,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,YAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,YAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,YAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,YAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,YAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,YAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,kC;;;;;;;;;;;ACpGA,cAAc,mBAAO,CAAC,oCAAU;AAChC;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,oBAAoB;AACpB,kBAAkB;AAClB,mBAAmB;AACnB,oBAAoB;AACpB,qBAAqB;AACrB;AACA,CAAC;AACD;AACA,iC;;;;;;;;;;;ACnCA,cAAc,mBAAO,CAAC,wCAAS;AAC/B;AACA;AACA;AACA,CAAC,kEAAkE;AACnE;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,mC;;;;;;;;;;;ACrEA,eAAe,mBAAO,CAAC,qCAAU;AACjC,eAAe,mBAAO,CAAC,+CAAe;AACtC,eAAe,mBAAO,CAAC,+CAAe;AACtC,cAAc,mBAAO,CAAC,6CAAc;AACpC,cAAc,mBAAO,CAAC,mCAAS;AAC/B;AACA;AACA,mCAAmC,kBAAkB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,SAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,SAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,SAAS;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,SAAS;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,WAAW;AACrC,8BAA8B,WAAW;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,gCAAgC,yBAAyB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,WAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gBAAgB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA,4BAA4B,4BAA4B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,kC;;;;;;;;;;;AClRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,iC;;;;;;;;;;;AClCA,sBAAsB,mBAAO,CAAC,8DAAyB;AACvD,eAAe,mBAAO,CAAC,oDAAoB;AAC3C,cAAc,mBAAO,CAAC,kDAAmB;AACzC,gBAAgB,mBAAO,CAAC,sDAAqB;AAC7C,eAAe,mBAAO,CAAC,0CAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,6EAA6E,aAAa,EAAE;AACzG,aAAa,4EAA4E,aAAa,EAAE;AACxG,aAAa,2EAA2E,aAAa,EAAE;AACvG,aAAa,4EAA4E,aAAa,EAAE;AACxG,aAAa,8EAA8E,aAAa,EAAE;AAC1G,aAAa,6EAA6E,aAAa,EAAE;AACzG,aAAa,4EAA4E,aAAa,EAAE;AACxG,aAAa,6EAA6E,aAAa,EAAE;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gC","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./js/main.js\");\n","var WebGLBlitter = (function () {\r\n    function WebGLBlitter(gl) {\r\n        this.gl = gl;\r\n        this.initShader();\r\n        this.initTexture();\r\n        this.initGeometry();\r\n    }\r\n    WebGLBlitter.prototype.initTexture = function () {\r\n        var gl = this.gl;\r\n        this.canvasTexture = gl.createTexture();\r\n        gl.bindTexture(gl.TEXTURE_2D, this.canvasTexture);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n    };\r\n    WebGLBlitter.prototype.initShader = function () {\r\n        var gl = this.gl;\r\n        var vertexShaderSource = \"attribute vec4 a_Position;\" +\r\n            \"attribute vec2 a_TexCoord;\" +\r\n            \"varying vec2 v_TexCoord;\" +\r\n            \"void main(){\" +\r\n            \"gl_Position = a_Position;\" +\r\n            \"v_TexCoord = a_TexCoord;\" +\r\n            \"}\";\r\n        var fragmentShaderSource = \"precision mediump float;\" +\r\n            \"    uniform sampler2D u_Sampler;\" +\r\n            \"    varying vec2 v_TexCoord;\" +\r\n            \"    void main(){\" +\r\n            \"        gl_FragColor = texture2D(u_Sampler, v_TexCoord);\" +\r\n            \"}\";\r\n        var vertShader = gl.createShader(gl.VERTEX_SHADER);\r\n        gl.shaderSource(vertShader, vertexShaderSource);\r\n        gl.compileShader(vertShader);\r\n        var fragShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n        gl.shaderSource(fragShader, fragmentShaderSource);\r\n        gl.compileShader(fragShader);\r\n        this.shaderProgram = gl.createProgram();\r\n        gl.attachShader(this.shaderProgram, vertShader);\r\n        gl.attachShader(this.shaderProgram, fragShader);\r\n        gl.linkProgram(this.shaderProgram);\r\n        this.u_Sampler = gl.getUniformLocation(this.shaderProgram, \"u_Sampler\");\r\n    };\r\n    WebGLBlitter.prototype.initGeometry = function () {\r\n        var gl = this.gl;\r\n        var vertexs = new Float32Array([\r\n            -1, 1, 0.0, 0.0, 1.0,\r\n            -1, -1, 0.0, 0.0, 0.0,\r\n            1, 1, 0.0, 1.0, 1.0,\r\n            1, -1, 0.0, 1.0, 0.0]);\r\n        this.vertexsBuffer = gl.createBuffer();\r\n        if (this.vertexsBuffer === null) {\r\n            console.log(\"vertexsBuffer is null\");\r\n            return false;\r\n        }\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexsBuffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, vertexs, gl.STATIC_DRAW);\r\n        var a_Position = gl.getAttribLocation(this.shaderProgram, \"a_Position\");\r\n        if (a_Position < 0) {\r\n            console.log(\"a_Position < 0\");\r\n            return false;\r\n        }\r\n        var a_TexCoord = gl.getAttribLocation(this.shaderProgram, \"a_TexCoord\");\r\n        if (a_TexCoord < 0) {\r\n            console.log(\"a_TexCoord < 0\");\r\n            return false;\r\n        }\r\n        gl.vertexAttribPointer(a_Position, 3, gl.FLOAT, false, vertexs.BYTES_PER_ELEMENT * 5, 0);\r\n        gl.enableVertexAttribArray(a_Position);\r\n        gl.vertexAttribPointer(a_TexCoord, 2, gl.FLOAT, false, vertexs.BYTES_PER_ELEMENT * 5, vertexs.BYTES_PER_ELEMENT * 3);\r\n        gl.enableVertexAttribArray(a_TexCoord);\r\n    };\r\n    WebGLBlitter.prototype.renderCanvas = function () {\r\n        var gl = this.gl;\r\n        gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\r\n        gl.useProgram(this.shaderProgram);\r\n        gl.uniform1i(this.u_Sampler, 0);\r\n        gl.activeTexture(this.gl.TEXTURE0);\r\n        gl.bindTexture(this.gl.TEXTURE_2D, this.canvasTexture);\r\n        gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\r\n    };\r\n    WebGLBlitter.prototype.blitPixels = function (width, height, pixels) {\r\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.canvasTexture);\r\n        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, width, height, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, pixels);\r\n        this.gl.bindTexture(this.gl.TEXTURE_2D, null);\r\n        this.renderCanvas();\r\n    };\r\n    return WebGLBlitter;\r\n})();\r\nexports.WebGLBlitter = WebGLBlitter;\r\n//# sourceMappingURL=webgl-blitter.js.map","var Buffer = (function () {\r\n    function Buffer(width, height, usingMSAA) {\r\n        this.usingMSAA = true;\r\n        this.zbuf = null;\r\n        this.msaaColorBuffer = null;\r\n        this.usingMSAA = usingMSAA;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.frameBuffer = new Uint8Array(width * height * 4);\r\n        if (!this.usingMSAA) {\r\n            this.zbuf = new Float32Array(width * height);\r\n        }\r\n        else {\r\n            this.zbuf = new Float32Array(width * height * 4);\r\n            this.msaaColorBuffer = new Uint8Array(width * height * 4 * 4);\r\n        }\r\n    }\r\n    Buffer.prototype.getZPos = function (x, y, index) {\r\n        if (!this.usingMSAA) {\r\n            return this.width * y + x;\r\n        }\r\n        else {\r\n            return (this.width * y + x) * 4 + index;\r\n        }\r\n    };\r\n    Buffer.prototype.ztest = function (x, y, rhw, index) {\r\n        if (index === void 0) { index = 0; }\r\n        var zPos = this.getZPos(x, y, index);\r\n        if (isNaN(this.zbuf[zPos]) || this.zbuf[zPos] > rhw) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    Buffer.prototype.setZ = function (x, y, rhw, index) {\r\n        if (index === void 0) { index = 0; }\r\n        var zPos = this.getZPos(x, y, index);\r\n        this.zbuf[zPos] = rhw;\r\n    };\r\n    Buffer.prototype.setColor = function (x, y, color, index) {\r\n        if (index === void 0) { index = 0; }\r\n        if (!this.usingMSAA) {\r\n            this.setFrameBufferPixel(x, y, color);\r\n        }\r\n        else {\r\n            var pstart = (this.width * y + x) * 4 * 4 + index * 4;\r\n            this.msaaColorBuffer[pstart] = color.r;\r\n            this.msaaColorBuffer[pstart + 1] = color.g;\r\n            this.msaaColorBuffer[pstart + 2] = color.b;\r\n            this.msaaColorBuffer[pstart + 3] = color.a;\r\n        }\r\n    };\r\n    Buffer.prototype.setFrameBufferPixel = function (x, y, color) {\r\n        var pstart = (this.width * y + x) * 4;\r\n        var a = color.a / 255;\r\n        this.frameBuffer[pstart] = color.r * a + this.frameBuffer[pstart] * (1 - a);\r\n        this.frameBuffer[pstart + 1] = color.g * a + this.frameBuffer[pstart + 1] * (1 - a);\r\n        this.frameBuffer[pstart + 2] = color.b * a + this.frameBuffer[pstart + 2] * (1 - a);\r\n        this.frameBuffer[pstart + 3] = 255;\r\n    };\r\n    Buffer.prototype.clear = function (backgroundColor) {\r\n        for (var l = 0; l < this.frameBuffer.length; l += 4) {\r\n            this.frameBuffer[l] = backgroundColor.r;\r\n            this.frameBuffer[l + 1] = backgroundColor.g;\r\n            this.frameBuffer[l + 2] = backgroundColor.b;\r\n            this.frameBuffer[l + 3] = backgroundColor.a;\r\n        }\r\n        for (var l = 0; l < this.zbuf.length; l++) {\r\n            this.zbuf[l] = NaN;\r\n        }\r\n        if (this.msaaColorBuffer != null) {\r\n            for (var l = 0; l < this.msaaColorBuffer.length; l += 4) {\r\n                this.msaaColorBuffer[l] = backgroundColor.r;\r\n                this.msaaColorBuffer[l + 1] = backgroundColor.g;\r\n                this.msaaColorBuffer[l + 2] = backgroundColor.b;\r\n                this.msaaColorBuffer[l + 3] = backgroundColor.a;\r\n            }\r\n        }\r\n    };\r\n    Buffer.prototype.applyMSAAFilter = function (x, y) {\r\n        if (this.msaaColorBuffer == null) {\r\n            return;\r\n        }\r\n        var pstart = (this.width * y + x) * 4 * 4;\r\n        var color = { r: 0, g: 0, b: 0, a: 0 };\r\n        for (var i = 0; i < 4; i++) {\r\n            var colorStart = pstart + i * 4;\r\n            var r = this.msaaColorBuffer[colorStart];\r\n            var g = this.msaaColorBuffer[colorStart + 1];\r\n            var b = this.msaaColorBuffer[colorStart + 2];\r\n            var a = this.msaaColorBuffer[colorStart + 3];\r\n            color.r += 0.25 * r;\r\n            color.g += 0.25 * g;\r\n            color.b += 0.25 * b;\r\n            color.a += 0.25 * a;\r\n        }\r\n        this.setFrameBufferPixel(x, y, color);\r\n    };\r\n    return Buffer;\r\n})();\r\nexports[\"default\"] = Buffer;\r\n//# sourceMappingURL=buffer.js.map","var Matrix = (function () {\r\n    function Matrix() {\r\n        this.m = [];\r\n        for (var i = 0; i < 4; i++) {\r\n            var col = new Float32Array(4);\r\n            this.m.push(col);\r\n        }\r\n        this.identify();\r\n    }\r\n    Matrix.prototype.identify = function () {\r\n        this.setValue(0);\r\n        this.m[0][0] = this.m[1][1] = this.m[2][2] = this.m[3][3] = 1;\r\n    };\r\n    Matrix.prototype.multiply = function (t, dst) {\r\n        if (dst === void 0) { dst = null; }\r\n        if (dst == null) {\r\n            dst = new Matrix();\r\n        }\r\n        for (var i = 0; i < 4; i++) {\r\n            for (var j = 0; j < 4; j++) {\r\n                dst.m[j][i] =\r\n                    this.m[j][0] * t.m[0][i]\r\n                        + this.m[j][1] * t.m[1][i]\r\n                        + this.m[j][2] * t.m[2][i]\r\n                        + this.m[j][3] * t.m[3][i];\r\n            }\r\n        }\r\n        return dst;\r\n    };\r\n    Matrix.prototype.setValue = function (val) {\r\n        for (var i = 0; i < 4; i++) {\r\n            for (var j = 0; j < 4; j++) {\r\n                this.m[j][i] = val;\r\n            }\r\n        }\r\n    };\r\n    Matrix.prototype.setPerspective = function (fovy, aspect, near, far) {\r\n        this.setValue(0);\r\n        var n = -near;\r\n        var f = -far;\r\n        var tn = -Math.tan(fovy / 2);\r\n        var nt = 1 / tn;\r\n        var nr = nt / aspect;\r\n        this.m[0][0] = nr;\r\n        this.m[1][1] = nt;\r\n        this.m[2][2] = (n + f) / (n - f);\r\n        this.m[3][2] = 2 * f * n / (f - n);\r\n        this.m[2][3] = 1;\r\n    };\r\n    Matrix.prototype.setLookAt = function (eye, at, up) {\r\n        var w = at.sub(eye).normalize().reverse();\r\n        var u = up.cross(w).normalize();\r\n        var v = w.cross(u);\r\n        this.setValue(0);\r\n        this.m[0][0] = u.x;\r\n        this.m[1][0] = u.y;\r\n        this.m[2][0] = u.z;\r\n        this.m[0][1] = v.x;\r\n        this.m[1][1] = v.y;\r\n        this.m[2][1] = v.z;\r\n        this.m[0][2] = w.x;\r\n        this.m[1][2] = w.y;\r\n        this.m[2][2] = w.z;\r\n        this.m[3][3] = 1;\r\n        var tEye = eye.reverse();\r\n        this.m[3][0] = u.dot(tEye);\r\n        this.m[3][1] = v.dot(tEye);\r\n        this.m[3][2] = w.dot(tEye);\r\n    };\r\n    return Matrix;\r\n})();\r\nexports.Matrix = Matrix;\r\n//# sourceMappingURL=matrix.js.map","var Vector = (function () {\r\n    function Vector(x, y, z, w) {\r\n        if (x === void 0) { x = 0; }\r\n        if (y === void 0) { y = 0; }\r\n        if (z === void 0) { z = 0; }\r\n        if (w === void 0) { w = 1; }\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        this.w = w;\r\n    }\r\n    Vector.prototype.getLength = function () {\r\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\r\n    };\r\n    Vector.prototype.reverse = function (dst) {\r\n        if (dst === void 0) { dst = null; }\r\n        if (dst == null) {\r\n            dst = new Vector();\r\n        }\r\n        dst.x = -this.x;\r\n        dst.y = -this.y;\r\n        dst.z = -this.z;\r\n        return dst;\r\n    };\r\n    Vector.prototype.add = function (t, dst) {\r\n        if (dst === void 0) { dst = null; }\r\n        if (dst == null) {\r\n            dst = new Vector();\r\n        }\r\n        dst.x = this.x + t.x;\r\n        dst.y = this.y + t.y;\r\n        dst.z = this.z + t.z;\r\n        dst.w = 1.0;\r\n        return dst;\r\n    };\r\n    Vector.prototype.sub = function (t, dst) {\r\n        if (dst === void 0) { dst = null; }\r\n        if (dst == null) {\r\n            dst = new Vector();\r\n        }\r\n        dst.x = this.x - t.x;\r\n        dst.y = this.y - t.y;\r\n        dst.z = this.z - t.z;\r\n        dst.w = 1.0;\r\n        return dst;\r\n    };\r\n    Vector.prototype.dot = function (t) {\r\n        return this.x * t.x + this.y * t.y + this.z * t.z;\r\n    };\r\n    Vector.prototype.cross = function (t, dst) {\r\n        if (dst === void 0) { dst = null; }\r\n        if (dst == null) {\r\n            dst = new Vector();\r\n        }\r\n        var x = this.y * t.z - this.z * t.y;\r\n        var y = this.z * t.x - this.x * t.z;\r\n        var z = this.x * t.y - this.y * t.x;\r\n        dst.x = x;\r\n        dst.y = y;\r\n        dst.z = z;\r\n        dst.w = 1.0;\r\n        return dst;\r\n    };\r\n    Vector.prototype.normalize = function (dst) {\r\n        if (dst === void 0) { dst = null; }\r\n        if (dst == null) {\r\n            dst = new Vector();\r\n        }\r\n        var len = this.getLength();\r\n        if (len > 0) {\r\n            dst.x = this.x / len;\r\n            dst.y = this.y / len;\r\n            dst.z = this.z / len;\r\n        }\r\n        return dst;\r\n    };\r\n    Vector.prototype.transform = function (matrix, dst) {\r\n        if (dst === void 0) { dst = null; }\r\n        if (dst == null) {\r\n            dst = new Vector();\r\n        }\r\n        var x = this.x, y = this.y, z = this.z, w = this.w;\r\n        var m = matrix.m;\r\n        dst.x = m[0][0] * x + m[1][0] * y + m[2][0] * z + m[3][0] * w;\r\n        dst.y = m[0][1] * x + m[1][1] * y + m[2][1] * z + m[3][1] * w;\r\n        dst.z = m[0][2] * x + m[1][2] * y + m[2][2] * z + m[3][2] * w;\r\n        dst.w = m[0][3] * x + m[1][3] * y + m[2][3] * z + m[3][3] * w;\r\n        return dst;\r\n    };\r\n    Vector.prototype.homogenenize = function () {\r\n        if (this.w != 0) {\r\n            this.x /= this.w;\r\n            this.y /= this.w;\r\n            this.z /= this.w;\r\n            this.w = 1;\r\n        }\r\n    };\r\n    return Vector;\r\n})();\r\nexports.Vector = Vector;\r\n//# sourceMappingURL=vector.js.map","var utils_1 = require(\"../utils\");\r\nvar Colors = (function () {\r\n    function Colors() {\r\n    }\r\n    Colors.clone = function (color) {\r\n        return { r: color.r, g: color.g, b: color.b, a: color.a };\r\n    };\r\n    Colors.getInterpColor = function (color1, color2, color3, a, b, c, dstColor) {\r\n        dstColor.r = utils_1[\"default\"].getInterpValue3(color1.r, color2.r, color3.r, a, b, c);\r\n        dstColor.g = utils_1[\"default\"].getInterpValue3(color1.g, color2.g, color3.g, a, b, c);\r\n        dstColor.b = utils_1[\"default\"].getInterpValue3(color1.b, color2.b, color3.b, a, b, c);\r\n        dstColor.a = utils_1[\"default\"].getInterpValue3(color1.a, color2.a, color3.a, a, b, c);\r\n    };\r\n    Colors.getBilinearColor = function (c1, c2, c3, c4, w1, w2, w3, w4, dstColor) {\r\n        dstColor.r = utils_1[\"default\"].getInterpValue4(c1.r, c2.r, c3.r, c4.r, w1, w2, w3, w4);\r\n        dstColor.g = utils_1[\"default\"].getInterpValue4(c1.g, c2.g, c3.g, c4.g, w1, w2, w3, w4);\r\n        dstColor.b = utils_1[\"default\"].getInterpValue4(c1.b, c2.b, c3.b, c4.b, w1, w2, w3, w4);\r\n        dstColor.a = utils_1[\"default\"].getInterpValue4(c1.a, c2.a, c3.a, c4.a, w1, w2, w3, w4);\r\n    };\r\n    Colors.multiplyColor = function (color1, color2, dst) {\r\n        dst.r = color1.r * color2.r / 255;\r\n        dst.g = color1.g * color2.g / 255;\r\n        dst.b = color1.b * color2.b / 255;\r\n        dst.a = color1.a * color2.a / 255;\r\n        return dst;\r\n    };\r\n    Colors.BLACK = { r: 0, g: 0, b: 0, a: 255 };\r\n    Colors.WHITE = { r: 255, g: 255, b: 255, a: 255 };\r\n    Colors.RED = { r: 255, g: 0, b: 0, a: 255 };\r\n    Colors.BLUE = { r: 0, g: 0, b: 255, a: 255 };\r\n    Colors.GREEN = { r: 0, g: 255, b: 0, a: 255 };\r\n    Colors.YELLOW = { r: 255, g: 255, b: 0, a: 255 };\r\n    return Colors;\r\n})();\r\nexports.Colors = Colors;\r\n//# sourceMappingURL=color.js.map","var color_1 = require(\"./color\");\r\n(function (TEXTURE_FILTER_MODE) {\r\n    TEXTURE_FILTER_MODE[TEXTURE_FILTER_MODE[\"NEAREST\"] = 1] = \"NEAREST\";\r\n    TEXTURE_FILTER_MODE[TEXTURE_FILTER_MODE[\"BILINEAR\"] = 2] = \"BILINEAR\";\r\n})(exports.TEXTURE_FILTER_MODE || (exports.TEXTURE_FILTER_MODE = {}));\r\nvar TEXTURE_FILTER_MODE = exports.TEXTURE_FILTER_MODE;\r\nvar Texture = (function () {\r\n    function Texture(width, height) {\r\n        this.data = [];\r\n        this.tmp = { r: 0, g: 0, b: 0, a: 0 };\r\n        this.filterMode = TEXTURE_FILTER_MODE.BILINEAR;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n    Texture.prototype.setPixel = function (x, y, color) {\r\n        var pos = y * this.width + x;\r\n        this.data[pos] = color;\r\n    };\r\n    Texture.prototype.sample = function (uv) {\r\n        var x = uv.u * (this.width - 1);\r\n        var y = uv.v * (this.height - 1);\r\n        return this.samplePos(x + 0.5, y + 0.5);\r\n    };\r\n    Texture.prototype.clamp = function (value, min, max) {\r\n        if (value > max) {\r\n            return max;\r\n        }\r\n        if (value < min) {\r\n            return min;\r\n        }\r\n        return value;\r\n    };\r\n    Texture.prototype.getPixel = function (x, y) {\r\n        return this.data[y * this.width + x];\r\n    };\r\n    Texture.prototype.samplePos = function (x, y) {\r\n        if (this.filterMode == TEXTURE_FILTER_MODE.NEAREST) {\r\n            x = this.clamp(Math.floor(x), 0, this.width - 1);\r\n            y = this.clamp(Math.floor(y), 0, this.height - 1);\r\n            var color = this.getPixel(x, y);\r\n            this.tmp.a = color.a;\r\n            this.tmp.r = color.r;\r\n            this.tmp.g = color.g;\r\n            this.tmp.b = color.b;\r\n            return this.tmp;\r\n        }\r\n        else if (this.filterMode == TEXTURE_FILTER_MODE.BILINEAR) {\r\n            var x1 = this.clamp(Math.floor(x), 0, this.width - 1);\r\n            var y1 = this.clamp(Math.floor(y), 0, this.height - 1);\r\n            var x2 = this.clamp(Math.floor(x) + 1, 0, this.width - 1);\r\n            var y2 = this.clamp(Math.floor(y) + 1, 0, this.height - 1);\r\n            var c1 = this.getPixel(x1, y1);\r\n            var c2 = this.getPixel(x2, y1);\r\n            var c3 = this.getPixel(x1, y2);\r\n            var c4 = this.getPixel(x2, y2);\r\n            var dx = x - x1;\r\n            var dy = y - y1;\r\n            var w1 = (1 - dx) * (1 - dy);\r\n            var w2 = dx * (1 - dy);\r\n            var w3 = (1 - dx) * dy;\r\n            var w4 = dx * dy;\r\n            color_1.Colors.getBilinearColor(c1, c2, c3, c4, w1, w2, w3, w4, this.tmp);\r\n            return this.tmp;\r\n        }\r\n        return color_1.Colors.BLACK;\r\n    };\r\n    return Texture;\r\n})();\r\nexports[\"default\"] = Texture;\r\n//# sourceMappingURL=texture.js.map","var buffer_1 = require(\"./buffer\");\r\nvar matrix_1 = require(\"./math/matrix\");\r\nvar vector_1 = require(\"./math/vector\");\r\nvar color_1 = require(\"./mesh/color\");\r\nvar utils_1 = require(\"./utils\");\r\nvar Raster = (function () {\r\n    function Raster(width, height, usingMSAA) {\r\n        if (usingMSAA === void 0) { usingMSAA = true; }\r\n        this.buffer = null;\r\n        this.backgroundColor = color_1.Colors.clone(color_1.Colors.BLACK);\r\n        this.activeTexture = null;\r\n        this.usingMSAA = true;\r\n        this.camera = {\r\n            view: new matrix_1.Matrix(),\r\n            projection: new matrix_1.Matrix(),\r\n            vp: new matrix_1.Matrix()\r\n        };\r\n        this.width = width;\r\n        this.height = height;\r\n        this.usingMSAA = usingMSAA;\r\n        this.buffer = new buffer_1[\"default\"](width, height, usingMSAA);\r\n        this.setDefaultCamera();\r\n    }\r\n    Raster.prototype.clear = function () {\r\n        this.buffer.clear(this.backgroundColor);\r\n    };\r\n    Raster.prototype.drawLine = function (x0, y0, x1, y1, color) {\r\n        if (x0 == x1) {\r\n            var dir = y0 < y1 ? 1 : -1;\r\n            for (var y = y0; y != y1; y += dir) {\r\n                this.setPixel(x0, y, color);\r\n            }\r\n            this.setPixel(x1, y1, color);\r\n        }\r\n        else if (y0 == y1) {\r\n            var dir = x0 < x1 ? 1 : -1;\r\n            for (var x = x0; x != x1; x += dir) {\r\n                this.setPixel(x, y0, color);\r\n            }\r\n            this.setPixel(x1, y1, color);\r\n        }\r\n        else {\r\n            var dx = Math.abs(x1 - x0);\r\n            var dy = Math.abs(y1 - y0);\r\n            if (dx > dy) {\r\n                if (x0 > x1) {\r\n                    var tx = x0, ty = y0;\r\n                    x0 = x1, y0 = y1;\r\n                    x1 = tx, y1 = ty;\r\n                }\r\n                var dir = y1 > y0 ? 1 : -1;\r\n                var y = y0;\r\n                var d = (y0 - y1) * (x0 + 1) + (x1 - x0) * (y0 + 0.5 * dir) + x0 * y1 - x1 * y0;\r\n                for (var x = x0; x <= x1; x++) {\r\n                    this.setPixel(x, y, color);\r\n                    if (d * dir < 0) {\r\n                        y += dir;\r\n                        d += (x1 - x0) * dir + (y0 - y1);\r\n                    }\r\n                    else {\r\n                        d += y0 - y1;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (y0 > y1) {\r\n                    var tx = x0, ty = y0;\r\n                    x0 = x1, y0 = y1;\r\n                    x1 = tx, y1 = ty;\r\n                }\r\n                var dir = x1 > x0 ? 1 : -1;\r\n                var x = x0;\r\n                var d = (y0 - y1) * (x0 + 0.5 * dir) + (x1 - x0) * (y0 + 1) + x0 * y1 - x1 * y0;\r\n                for (var y = y0; y <= y1; y++) {\r\n                    this.setPixel(x, y, color);\r\n                    if (d * dir > 0) {\r\n                        x += dir;\r\n                        d += (x1 - x0) + (y0 - y1) * dir;\r\n                    }\r\n                    else {\r\n                        d += x1 - x0;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Raster.prototype.barycentricFunc = function (vs, a, b, x, y) {\r\n        return ((vs[a].y - vs[b].y) * x + (vs[b].x - vs[a].x) * y + vs[a].x * vs[b].y - vs[b].x * vs[a].y);\r\n    };\r\n    Raster.prototype.getBarycentricInTriangle = function (x, y, vs, fAlpha, fBelta, fGama, fAlphaTest, fBeltaTest, fGamaTest) {\r\n        var belta = this.barycentricFunc(vs, 2, 0, x, y) / fBelta;\r\n        var gama = this.barycentricFunc(vs, 0, 1, x, y) / fGama;\r\n        var alpha = 1 - belta - gama;\r\n        if (alpha >= 0 && belta >= 0 && gama >= 0) {\r\n            if ((alpha > 0 || fAlpha * fAlphaTest > 0)\r\n                && (belta > 0 || fBelta * fBeltaTest > 0)\r\n                && (gama > 0 || fGama * fGamaTest > 0)) {\r\n                return [alpha, belta, gama];\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    Raster.prototype.drawTriangle2D = function (v0, v1, v2) {\r\n        var vs = [v0.posScreen, v1.posScreen, v2.posScreen];\r\n        var x0 = vs[0].x, x1 = vs[1].x, x2 = vs[2].x, y0 = vs[0].y, y1 = vs[1].y, y2 = vs[2].y;\r\n        var minX = Math.floor(Math.min(x0, x1, x2));\r\n        var maxX = Math.ceil(Math.max(x0, x1, x2));\r\n        var minY = Math.floor(Math.min(y0, y1, y2));\r\n        var maxY = Math.ceil(Math.max(y0, y1, y2));\r\n        var fBelta = this.barycentricFunc(vs, 2, 0, x1, y1);\r\n        var fGama = this.barycentricFunc(vs, 0, 1, x2, y2);\r\n        var fAlpha = this.barycentricFunc(vs, 1, 2, x0, y0);\r\n        var offScreenPointX = -1, offScreenPointY = -1;\r\n        var fAlphaTest = this.barycentricFunc(vs, 1, 2, offScreenPointX, offScreenPointY);\r\n        var fGamaTest = this.barycentricFunc(vs, 0, 1, offScreenPointX, offScreenPointY);\r\n        var fBeltaTest = this.barycentricFunc(vs, 2, 0, offScreenPointX, offScreenPointY);\r\n        for (var x = minX; x <= maxX; x++) {\r\n            for (var y = minY; y <= maxY; y++) {\r\n                if (!this.usingMSAA) {\r\n                    this.rasterizePixelInTriangle(x, y, vs, v0, v1, v2, fAlpha, fBelta, fGama, fAlphaTest, fBeltaTest, fGamaTest);\r\n                }\r\n                else {\r\n                    this.rasterizePixelInTriangleMSAA(x, y, vs, v0, v1, v2, fAlpha, fBelta, fGama, fAlphaTest, fBeltaTest, fGamaTest);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Raster.prototype.rasterizePixelInTriangle = function (x, y, vs, v0, v1, v2, fAlpha, fBelta, fGama, fAlphaTest, fBeltaTest, fGamaTest) {\r\n        var barycentric = this.getBarycentricInTriangle(x, y, vs, fAlpha, fBelta, fGama, fAlphaTest, fBeltaTest, fGamaTest);\r\n        if (barycentric == null) {\r\n            return;\r\n        }\r\n        var rhw = utils_1[\"default\"].getInterpValue3(v0.rhw, v1.rhw, v2.rhw, barycentric[0], barycentric[1], barycentric[2]);\r\n        if (this.buffer.ztest(x, y, rhw)) {\r\n            var w = 1 / (rhw != 0 ? rhw : 1);\r\n            var a = barycentric[0] * w * v0.rhw;\r\n            var b = barycentric[1] * w * v1.rhw;\r\n            var c = barycentric[2] * w * v2.rhw;\r\n            var tempColor = color_1.Colors.clone(color_1.Colors.WHITE);\r\n            var uv = { u: 0, v: 0 };\r\n            color_1.Colors.getInterpColor(v0.color, v1.color, v2.color, a, b, c, tempColor);\r\n            utils_1[\"default\"].getInterpUV(v0.uv, v1.uv, v2.uv, a, b, c, uv);\r\n            var finalColor = this.fragmentShading(x, y, tempColor, uv);\r\n            if (finalColor.a > 0) {\r\n                this.setPixel(x, y, finalColor);\r\n                this.buffer.setZ(x, y, rhw);\r\n            }\r\n        }\r\n    };\r\n    Raster.prototype.rasterizePixelInTriangleMSAA = function (x, y, vs, v0, v1, v2, fAlpha, fBelta, fGama, fAlphaTest, fBeltaTest, fGamaTest) {\r\n        var points = [[x - 0.325, y + 0.125], [x + 0.125, y + 0.325], [x - 0.125, y - 0.325], [x + 0.325, y - 0.125]];\r\n        var testResults = [];\r\n        for (var i = 0; i < points.length; i++) {\r\n            var p = points[i];\r\n            var px = p[0], py = p[1];\r\n            var barycentric = this.getBarycentricInTriangle(px, py, vs, fAlpha, fBelta, fGama, fAlphaTest, fBeltaTest, fGamaTest);\r\n            if (barycentric != null) {\r\n                var rhw = utils_1[\"default\"].getInterpValue3(v0.rhw, v1.rhw, v2.rhw, barycentric[0], barycentric[1], barycentric[2]);\r\n                if (this.buffer.ztest(x, y, rhw, i)) {\r\n                    testResults.push({\r\n                        barycentric: barycentric,\r\n                        index: i,\r\n                        x: x,\r\n                        y: y,\r\n                        rhw: rhw\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        if (testResults.length > 0) {\r\n            var fx = x, fy = y;\r\n            var barycentric = this.getBarycentricInTriangle(x, y, vs, fAlpha, fBelta, fGama, fAlphaTest, fBeltaTest, fGamaTest);\r\n            if (barycentric == null) {\r\n                barycentric = testResults[0].barycentric;\r\n                fx = testResults[0].x;\r\n                fy = testResults[0].y;\r\n            }\r\n            var rhw = utils_1[\"default\"].getInterpValue3(v0.rhw, v1.rhw, v2.rhw, barycentric[0], barycentric[1], barycentric[2]);\r\n            var w = 1 / (rhw != 0 ? rhw : 1);\r\n            var a = barycentric[0] * w * v0.rhw;\r\n            var b = barycentric[1] * w * v1.rhw;\r\n            var c = barycentric[2] * w * v2.rhw;\r\n            var tempColor = color_1.Colors.clone(color_1.Colors.WHITE);\r\n            var uv = { u: 0, v: 0 };\r\n            color_1.Colors.getInterpColor(v0.color, v1.color, v2.color, a, b, c, tempColor);\r\n            utils_1[\"default\"].getInterpUV(v0.uv, v1.uv, v2.uv, a, b, c, uv);\r\n            var finalColor = this.fragmentShading(fx, fy, tempColor, uv);\r\n            if (finalColor.a > 0) {\r\n                for (var _i = 0; _i < testResults.length; _i++) {\r\n                    var result = testResults[_i];\r\n                    var index = result.index;\r\n                    var rhw_1 = result.rhw;\r\n                    this.setPixel(x, y, finalColor, index);\r\n                    this.buffer.setZ(x, y, rhw_1, index);\r\n                }\r\n                this.buffer.applyMSAAFilter(x, y);\r\n            }\r\n        }\r\n    };\r\n    Raster.prototype.fragmentShading = function (x, y, color, uv) {\r\n        if (this.activeTexture != null) {\r\n            var tex = this.activeTexture.sample(uv);\r\n            return color_1.Colors.multiplyColor(tex, color, tex);\r\n        }\r\n        return color;\r\n    };\r\n    Raster.prototype.setActiveTexture = function (texture) {\r\n        this.activeTexture = texture;\r\n    };\r\n    Raster.prototype.setBackgroundColor = function (color) {\r\n        this.backgroundColor = color_1.Colors.clone(color);\r\n    };\r\n    Raster.prototype.setPixel = function (x, y, color, index) {\r\n        if (index === void 0) { index = 0; }\r\n        if (x < this.width && y < this.height && x >= 0 && y >= 0) {\r\n            this.buffer.setColor(x, y, color, index);\r\n        }\r\n    };\r\n    Raster.prototype.drawElements = function (va, elements) {\r\n        if (elements.length % 3 != 0) {\r\n            return;\r\n        }\r\n        var cameraTransform = this.camera.vp;\r\n        for (var _i = 0; _i < va.length; _i++) {\r\n            var vert = va[_i];\r\n            if (vert.posProject == null) {\r\n                vert.posProject = new vector_1.Vector();\r\n            }\r\n            vert.posWorld.transform(cameraTransform, vert.posProject);\r\n            vert.rhw = 1 / vert.posProject.w;\r\n            vert.posProject.homogenenize();\r\n            if (utils_1[\"default\"].isInsideViewVolumn(vert.posProject)) {\r\n                if (vert.posScreen == null) {\r\n                    vert.posScreen = new vector_1.Vector();\r\n                }\r\n                utils_1[\"default\"].convertToScreenPos(vert.posProject, vert.posScreen, this.width, this.height);\r\n            }\r\n        }\r\n        for (var i = 0; i < elements.length; i += 3) {\r\n            var trianglePoints = [va[elements[i]], va[elements[i + 1]], va[elements[i + 2]]];\r\n            var culling = false;\r\n            for (var _a = 0; _a < trianglePoints.length; _a++) {\r\n                var p = trianglePoints[_a];\r\n                if (!utils_1[\"default\"].isInsideViewVolumn(p.posProject)) {\r\n                    culling = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!culling) {\r\n                this.drawTriangle2D(trianglePoints[0], trianglePoints[1], trianglePoints[2]);\r\n            }\r\n        }\r\n    };\r\n    Raster.prototype.setDefaultCamera = function () {\r\n        var eye = new vector_1.Vector(1.5, 0, 3, 1);\r\n        var at = new vector_1.Vector(0, 0, 0, 1);\r\n        var up = new vector_1.Vector(0, 1, 0, 1);\r\n        var fovy = Math.PI / 2;\r\n        var aspect = this.width / this.height;\r\n        var near = 1;\r\n        var far = 500;\r\n        this.setCamera(eye, at, up, fovy, aspect, near, far);\r\n    };\r\n    Raster.prototype.setCamera = function (eye, lookAt, up, fovy, aspect, near, far) {\r\n        this.camera.view.setLookAt(eye, lookAt, up);\r\n        this.camera.projection.setPerspective(fovy, aspect, near, far);\r\n        this.camera.vp = this.camera.view.multiply(this.camera.projection);\r\n    };\r\n    Raster.prototype.getFrameBuffer = function () {\r\n        return this.buffer.frameBuffer;\r\n    };\r\n    return Raster;\r\n})();\r\nexports[\"default\"] = Raster;\r\n//# sourceMappingURL=raster.js.map","var Utils = (function () {\r\n    function Utils() {\r\n    }\r\n    Utils.isInsideViewVolumn = function (v) {\r\n        if (v.x < -1 || v.x > 1) {\r\n            return false;\r\n        }\r\n        if (v.y < -1 || v.y > 1) {\r\n            return false;\r\n        }\r\n        if (v.z < -1 || v.z > 1) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    Utils.convertToScreenPos = function (v, dst, width, height) {\r\n        dst.x = (v.x + 1) / 2 * width;\r\n        dst.y = (v.y + 1) / 2 * height;\r\n        dst.z = v.z;\r\n        return dst;\r\n    };\r\n    Utils.getInterpUV = function (uv1, uv2, uv3, a, b, c, dstUV) {\r\n        dstUV.u = Utils.getInterpValue3(uv1.u, uv2.u, uv3.u, a, b, c);\r\n        dstUV.v = Utils.getInterpValue3(uv1.v, uv2.v, uv3.v, a, b, c);\r\n    };\r\n    Utils.getInterpValue3 = function (v1, v2, v3, a, b, c) {\r\n        return v1 * a + v2 * b + v3 * c;\r\n    };\r\n    Utils.getInterpValue4 = function (v1, v2, v3, v4, a, b, c, d) {\r\n        return v1 * a + v2 * b + v3 * c + v4 * d;\r\n    };\r\n    return Utils;\r\n})();\r\nexports[\"default\"] = Utils;\r\n//# sourceMappingURL=utils.js.map","var webgl_blitter_1 = require(\"./blitter/webgl-blitter\");\r\nvar vector_1 = require(\"./core/math/vector\");\r\nvar color_1 = require(\"./core/mesh/color\");\r\nvar texture_1 = require(\"./core/mesh/texture\");\r\nvar raster_1 = require(\"./core/raster\");\r\nvar App = (function () {\r\n    function App(canvasWidth, canvasHeight, gl) {\r\n        this.blitter = null;\r\n        this.renderder = new raster_1[\"default\"](canvasWidth, canvasHeight, true);\r\n        this.blitter = new webgl_blitter_1.WebGLBlitter(gl);\r\n        this.init();\r\n        var self = this;\r\n        var wrapMainLoop = function () {\r\n            self.mainLoop();\r\n            requestAnimationFrame(wrapMainLoop);\r\n        };\r\n        wrapMainLoop();\r\n    }\r\n    App.prototype.init = function () {\r\n        var eye = new vector_1.Vector(1.5, 0, 2.5, 1);\r\n        var at = new vector_1.Vector(0, 0, 0, 1);\r\n        var up = new vector_1.Vector(0, 1, 0, 1);\r\n        var fovy = Math.PI / 2;\r\n        var aspect = this.renderder.width / this.renderder.height;\r\n        var near = 1;\r\n        var far = 500;\r\n        this.renderder.setCamera(eye, at, up, fovy, aspect, near, far);\r\n        this.renderder.setBackgroundColor(color_1.Colors.YELLOW);\r\n    };\r\n    App.prototype.mainLoop = function () {\r\n        this.renderder.clear();\r\n        var va = [\r\n            { posWorld: new vector_1.Vector(-1, -1, 1), color: color_1.Colors.WHITE, uv: { u: 0, v: 0 } },\r\n            { posWorld: new vector_1.Vector(1, -1, 1), color: color_1.Colors.WHITE, uv: { u: 1, v: 0 } },\r\n            { posWorld: new vector_1.Vector(1, 1, 1), color: color_1.Colors.WHITE, uv: { u: 1, v: 1 } },\r\n            { posWorld: new vector_1.Vector(-1, 1, 1), color: color_1.Colors.WHITE, uv: { u: 0, v: 1 } },\r\n            { posWorld: new vector_1.Vector(-1, -1, -1), color: color_1.Colors.WHITE, uv: { u: 0, v: 0 } },\r\n            { posWorld: new vector_1.Vector(1, -1, -1), color: color_1.Colors.WHITE, uv: { u: 1, v: 0 } },\r\n            { posWorld: new vector_1.Vector(1, 1, -1), color: color_1.Colors.WHITE, uv: { u: 1, v: 1 } },\r\n            { posWorld: new vector_1.Vector(-1, 1, -1), color: color_1.Colors.WHITE, uv: { u: 0, v: 1 } },\r\n        ];\r\n        var elements = [\r\n            0, 1, 2,\r\n            2, 3, 0,\r\n            7, 6, 5,\r\n            5, 4, 7,\r\n            0, 4, 5,\r\n            5, 1, 0,\r\n            1, 5, 6,\r\n            6, 2, 1,\r\n            2, 6, 7,\r\n            7, 3, 2,\r\n            3, 7, 4,\r\n            4, 0, 3\r\n        ];\r\n        this.renderder.setActiveTexture(this.createTexture());\r\n        this.renderder.drawElements(va, elements);\r\n        this.flush();\r\n    };\r\n    App.prototype.createTexture = function () {\r\n        var texture = new texture_1[\"default\"](256, 256);\r\n        for (var i = 0; i < 256; i++) {\r\n            for (var j = 0; j < 256; j++) {\r\n                var x = Math.floor(i / 32);\r\n                var y = Math.floor(j / 32);\r\n                if ((x + y) % 2 == 0) {\r\n                    texture.setPixel(j, i, color_1.Colors.BLUE);\r\n                }\r\n                else {\r\n                    texture.setPixel(j, i, color_1.Colors.WHITE);\r\n                }\r\n            }\r\n        }\r\n        return texture;\r\n    };\r\n    App.prototype.flush = function () {\r\n        this.blitter.blitPixels(this.renderder.width, this.renderder.height, this.renderder.getFrameBuffer());\r\n    };\r\n    return App;\r\n})();\r\nexports[\"default\"] = App;\r\nwindow.onload = function () {\r\n    var canvas = document.getElementById('canvas');\r\n    var gl = canvas.getContext('webgl');\r\n    if (!gl) {\r\n        console.log(\"WEBGL FAILED\");\r\n        return;\r\n    }\r\n    window.app = new App(canvas.width, canvas.height, gl);\r\n};\r\n//# sourceMappingURL=main.js.map"],"sourceRoot":""}